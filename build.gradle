/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'java'
    id 'maven'
    id 'com.bmuschko.docker-remote-api' version '4.7.0'
}

repositories {
    mavenLocal()
    maven {
        url = 'http://repo.maven.apache.org/maven2'
    }
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integrationTest/java')
        }
        resources.srcDir file('src/integrationTest/resources')
        // resources.srcDir file('/src/main/docker')
    }
}
configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
    compile 'log4j:log4j:1.2.17'
    testCompile 'junit:junit:4.11'
    // integrationTestCompile 'org.assertj:assertj-core:3.0.0'
    integrationTestCompile 'junit:junit:4.11'
}

dependencies {
    compile 'com.google.guava:guava:20.0'
    compile 'junit:junit:4.12'
    testCompile 'com.github.docker-java:docker-java:3.0.14'
}

jar {
    manifest {
        attributes(
              //  'Main-Class': 'com.package.YourClass'
              'Main-Class': 'edu.cscc.topics.tools.build.ConstantToCamel'
        )
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
 }
// Import the tasks you want to use from the above plugin
import com.bmuschko.gradle.docker.tasks.image.*

// Configure the task to build the docker image.  You'll want to be sure this runs whenever you run 'gradle check'
task buildImage(type: DockerBuildImage) {
    // TODO: insert the appropriate dependsOn here... what do you need to be able to run this task?  (what needs to go in the docker
    // image you're building?
    dependsOn jar    
    dependsOn test
    // You can tell it a different place where to pick up the Dockerfile from, if you moved yours around for some reason...
    dockerFile = file('src/main/docker/Dockerfile')
    
    // This specifies the "build context" that is passed to docker... '.' is the current directory.
    inputDir = file('.')
    
    // This adds this specific tag to the docker image, and is just here for reference.
    tags.add('edu.cscc.topics.tools/constant-to-camel:1.0.1')
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
    dependsOn buildImage
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test

group = 'edu.cscc.topics'
version = '1.0-SNAPSHOT'
sourceCompatibility = '1.8'
/* end */
